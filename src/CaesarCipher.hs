module CaesarCipher (decrypt, encrypt) where

shiftCharacter :: Char -> Char
shiftCharacter char
    | char == 'a' = 'b'
    | char == 'b' = 'c'
    | char == 'c' = 'd'
    | char == 'd' = 'e'
    | char == 'e' = 'f'
    | char == 'f' = 'g'
    | char == 'g' = 'h'
    | char == 'h' = 'i'
    | char == 'i' = 'j'
    | char == 'j' = 'k'
    | char == 'k' = 'l'
    | char == 'l' = 'm'
    | char == 'm' = 'n'
    | char == 'n' = 'o'
    | char == 'o' = 'p'
    | char == 'p' = 'q'
    | char == 'q' = 'r'
    | char == 'r' = 's'
    | char == 's' = 't'
    | char == 't' = 'u'
    | char == 'u' = 'v'
    | char == 'v' = 'w'
    | char == 'w' = 'x'
    | char == 'x' = 'y'
    | char == 'y' = 'z'
    | char == 'z' = 'A'
    | char == 'A' = 'B'
    | char == 'B' = 'C'
    | char == 'C' = 'D'
    | char == 'D' = 'E'
    | char == 'E' = 'F'
    | char == 'F' = 'G'
    | char == 'G' = 'H'
    | char == 'H' = 'I'
    | char == 'I' = 'J'
    | char == 'J' = 'K'
    | char == 'K' = 'L'
    | char == 'L' = 'M'
    | char == 'M' = 'N'
    | char == 'N' = 'O'
    | char == 'O' = 'P'
    | char == 'P' = 'Q'
    | char == 'Q' = 'R'
    | char == 'R' = 'S'
    | char == 'S' = 'T'
    | char == 'T' = 'U'
    | char == 'U' = 'V'
    | char == 'V' = 'W'
    | char == 'W' = 'X'
    | char == 'X' = 'Y'
    | char == 'Y' = 'Z'
    | char == 'Z' = 'a'
    | otherwise   = char

unshiftCharacter :: Char -> Char
unshiftCharacter char
    | char == 'a' = 'Z'
    | char == 'b' = 'a'
    | char == 'c' = 'b'
    | char == 'd' = 'c'
    | char == 'e' = 'd'
    | char == 'f' = 'e'
    | char == 'g' = 'f'
    | char == 'h' = 'g'
    | char == 'i' = 'h'
    | char == 'j' = 'i'
    | char == 'k' = 'j'
    | char == 'l' = 'k'
    | char == 'm' = 'l'
    | char == 'n' = 'm'
    | char == 'o' = 'n'
    | char == 'p' = 'o'
    | char == 'q' = 'p'
    | char == 'r' = 'q'
    | char == 's' = 'r'
    | char == 't' = 's'
    | char == 'u' = 't'
    | char == 'v' = 'u'
    | char == 'w' = 'v'
    | char == 'x' = 'w'
    | char == 'y' = 'x'
    | char == 'z' = 'y'
    | char == 'A' = 'z'
    | char == 'B' = 'A'
    | char == 'C' = 'B'
    | char == 'D' = 'C'
    | char == 'E' = 'D'
    | char == 'F' = 'E'
    | char == 'G' = 'F'
    | char == 'H' = 'G'
    | char == 'I' = 'H'
    | char == 'J' = 'I'
    | char == 'K' = 'J'
    | char == 'L' = 'K'
    | char == 'M' = 'L'
    | char == 'N' = 'M'
    | char == 'O' = 'N'
    | char == 'P' = 'O'
    | char == 'Q' = 'P'
    | char == 'R' = 'Q'
    | char == 'S' = 'R'
    | char == 'T' = 'S'
    | char == 'U' = 'T'
    | char == 'V' = 'U'
    | char == 'W' = 'V'
    | char == 'X' = 'W'
    | char == 'Y' = 'X'
    | char == 'Z' = 'Y'
    | otherwise   = char

encrypt :: String -> Integer -> String
encrypt plaintext shift
    | shift == 0 = plaintext
    | shift  > 0 = encrypt (map shiftCharacter plaintext) (shift - 1) 
    | otherwise  = plaintext

decrypt :: String -> Integer -> String
decrypt ciphertext shift 
    | shift == 0 = ciphertext
    | shift  > 0 = decrypt (map unshiftCharacter ciphertext) (shift - 1) 
    | otherwise  = ciphertext
